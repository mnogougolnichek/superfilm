{"version":3,"sources":["images/infoimg.jpg","reducers/dataSelected.js","reducers/dataPrev.js","reducers/selectedCardsQuantity.js","reducers/prevCardsQuantity.js","reducers/date.js","reducers/listVisibility.js","reducers/monthNames.js","reducers/imageSize.js","reducers/index.js","actions/fetchData.js","actions/setListVisibility.js","components/MovieCalendar.js","actions/setDate.js","actions/setCardsQuantity.js","components/SetCardsQuantityBtn.js","components/ListDate.js","actions/setImageSize.js","actions/setCardStyle.js","components/MovieList.js","components/MovieListContainer.js","components/BackBtn.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","Date","combineReducers","dataSelected","state","arguments","length","undefined","action","type","payload","dataPrev","selectedCardsQuantity","prevCardsQuantity","date","listVisibility","monthNames","imageSize","fetchData","dispatch","curr_date","getDate","diff","getTime","prev_date","curr_month","getMonth","prev_month","curr_year","getFullYear","Number","fetch","concat","then","response","json","catch","console","log","setListVisibility","value","MovieCalendar","onChange","_this","props","onSetDate","onSetVisibility","onFetchData","react_default","a","createElement","className","id","src","infoBlockImg","alt","entry_default","this","Component","components_MovieCalendar","connect","setDate","setCardsQuantity","cardsQuantity","SetCardsQuantityBtn","data","showMore","onClick","onSetCardsQuantity","setButtonContent","ListDate","isToday","setMonth","setImageSize","setCardStyle","newSize","newData","map","item","MovieList","show","image","original","medium","components_ListDate","index","isActiveDateCard","key","isImage","onSetImageSize","onSetCardStyle","name","season","airdate","substring","_links","self","href","slice","components_SetCardsQuantityBtn","size","MovieListContainer","dataToday","components_MovieList","dataYesterday","components_MovieListContainer","BackBtn","Header","components_BackBtn","App","components_Header","Boolean","window","location","hostname","match","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fc582d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/infoimg.03d0915f.jpg\";","const initialState = [];\r\n\r\nexport default function dataSelected(state = initialState, action) {\r\n    if(action.type === 'FETCH_DATA_SELECTED'){\r\n        return action.payload;\r\n    }\r\n    if(action.type === 'SET_SELECTED_DAY_CARD_IMAGE_SIZE'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = [];\r\n\r\nexport default function dataPrev(state = initialState, action) {\r\n    if(action.type === 'FETCH_DATA_PREV'){\r\n        return action.payload;\r\n    }\r\n    if(action.type === 'SET_PREV_DAY_CARD_IMAGE_SIZE'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = 2;\r\n\r\nexport default function cards(state = initialState, action) {\r\n    if(action.type === 'SET_SELECTED_CARDS_QUANTITY'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = 2;\r\n\r\nexport default function prevCardsQuantity(state = initialState, action) {\r\n    if(action.type === 'SET_PREV_CARDS_QUANTITY'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = new Date();\r\n\r\nexport default function date(state = initialState, action) {\r\n    if(action.type === 'SET_DATE'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = false;\r\n\r\nexport default function listVisibility(state = initialState, action) {\r\n    if(action.type === 'SET_LIST_VISIBILITY'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = [\"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\",\r\n    \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"\r\n];\r\n\r\nexport default function monthNames(state = initialState) {\r\n    return state;\r\n}","const initialState = 'medium';\r\n\r\nexport default function imageSize(state = initialState, action) {\r\n    if(action.type === 'SET_IMAGE_SIZE'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","import {combineReducers} from 'redux';\r\nimport dataSelected from './dataSelected';\r\nimport dataPrev from './dataPrev';\r\nimport selectedCardsQuantity from './selectedCardsQuantity';\r\nimport prevCardsQuantity from './prevCardsQuantity';\r\nimport date from './date';\r\nimport listVisibility from './listVisibility';\r\nimport monthNames from './monthNames';\r\nimport imageSize from './imageSize';\r\n\r\nexport default combineReducers({\r\n    dataSelected,\r\n    dataPrev,\r\n    selectedCardsQuantity,\r\n    prevCardsQuantity,\r\n    date,\r\n    listVisibility,\r\n    monthNames,\r\n    imageSize\r\n})","\r\nexport const fetchData = (date) => dispatch =>{\r\n    let curr_date = \"\" + date.getDate(),\r\n        diff = date.getTime() - 86400000,\r\n        prev_date = new Date(diff).getDate(),\r\n        curr_month = \"\" + (date.getMonth() + 1),\r\n        prev_month = \"\" + (date.getMonth() + 1),\r\n        curr_year = \"\" + date.getFullYear();\r\n    if(curr_date.length<2)curr_date = '0' + curr_date;\r\n    if(curr_date<2)prev_month = (Number(prev_month)) - 1;\r\n    if(prev_date<10)prev_date = '0' + prev_date;\r\n    if(curr_month.length<2)curr_month = '0' + curr_month;\r\n    if(curr_month===\"01\") prev_month = 12;\r\n    if(prev_month<10)prev_month = '0' + prev_month;\r\n    fetch(`https://api.tvmaze.com/schedule?country=US&date=${curr_year + \"-\" + curr_month + \"-\" + curr_date}`)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(response => {\r\n            dispatch({type: 'FETCH_DATA_SELECTED', payload: response});\r\n        })\r\n        .catch( console.log );\r\n    fetch(`https://api.tvmaze.com/schedule?country=US&date=${curr_year + \"-\" + prev_month + \"-\" + prev_date}`)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(response => {\r\n            dispatch({type: 'FETCH_DATA_PREV', payload: response});\r\n        })\r\n        .catch( console.log );\r\n};","\r\nexport const setListVisibility = (value) => dispatch =>{\r\n    dispatch({type: 'SET_LIST_VISIBILITY', payload: value});\r\n};","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Calendar from 'react-calendar';\r\nimport infoBlockImg from '../images/infoimg.jpg';\r\nimport {setDate} from \"../actions/setDate\";\r\nimport {fetchData} from \"../actions/fetchData\";\r\nimport {setListVisibility} from \"../actions/setListVisibility\";\r\n\r\nclass MovieCalendar extends Component {\r\n\r\n    onChange = date => {\r\n        this.props.onSetDate(date);\r\n        this.props.onSetVisibility(true);\r\n        this.props.onFetchData(this.props.date);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calendar-block\" id=\"calendar\">\r\n                <div className=\"info-block\">\r\n                    <img src={infoBlockImg} className=\"info-block__img\" alt=\"\"/>\r\n                    <p>Для получения списка сериалов, пожалуйста, выберите необходимый месяц и день.</p>\r\n                </div>\r\n                <Calendar\r\n                    onChange={this.onChange}\r\n                    value={this.props.date}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        date:state.date\r\n    }),\r\n    dispatch =>({\r\n        onSetDate: (date) =>{\r\n            dispatch(setDate(date));\r\n        },\r\n        onFetchData: (date) =>{\r\n            dispatch(fetchData(date))\r\n        },\r\n        onSetVisibility: (value) =>{\r\n            dispatch(setListVisibility(value));\r\n        }\r\n    })\r\n)(MovieCalendar);","\r\nexport const setDate = (date) => dispatch =>{\r\n    dispatch({type: 'SET_DATE', payload: date});\r\n};","\r\nexport const setCardsQuantity = (cardsQuantity, id) => dispatch =>{\r\n    console.log(cardsQuantity, id);\r\n    if(id === 'selectedDateBtn'){\r\n        dispatch({type: 'SET_SELECTED_CARDS_QUANTITY', payload: cardsQuantity});\r\n    }\r\n    if(id === 'prevDateBtn'){\r\n        dispatch({type: 'SET_PREV_CARDS_QUANTITY', payload: cardsQuantity});\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {setCardsQuantity} from \"../actions/setCardsQuantity\";\r\n\r\nclass SetCardsQuantityBtn extends Component{\r\n    showMore(cardsQuantity){\r\n        return `Показать еще ${this.props.data.length - cardsQuantity} сериал`\r\n    }\r\n\r\n    setButtonContent(){\r\n        if(this.props.data.length!==0){\r\n            if(this.props.id === 'selectedDateBtn'){\r\n                return `${this.props.selectedCardsQuantity > 2 ? 'Показать основные' : this.showMore(this.props.selectedCardsQuantity)}`;\r\n            }else if(this.props.id === 'prevDateBtn'){\r\n                return `${this.props.prevCardsQuantity > 2 ? 'Показать основные' : this.showMore(this.props.prevCardsQuantity)}`;\r\n            }\r\n        }else{\r\n            return 'Нет сериалов для показа'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <button\r\n            className=\"setCardsQuantityBtn\"\r\n            onClick={()=>{\r\n                let cardsQuantity;\r\n                if(this.props.id === 'selectedDateBtn'){\r\n                    cardsQuantity = this.props.selectedCardsQuantity > 2 ? 2 : this.props.data.length;\r\n                }else if(this.props.id === 'prevDateBtn'){\r\n                    cardsQuantity = this.props.prevCardsQuantity > 2 ? 2 : this.props.data.length;\r\n                }\r\n                this.props.onSetCardsQuantity(cardsQuantity, this.props.id);\r\n            }}>\r\n            {this.setButtonContent()}\r\n        </button>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        selectedCardsQuantity: state.selectedCardsQuantity,\r\n        prevCardsQuantity: state.prevCardsQuantity\r\n\r\n    }),\r\n    dispatch =>({\r\n        onSetCardsQuantity: (cardsQuantity, id) =>{\r\n            dispatch(setCardsQuantity(cardsQuantity, id));\r\n        }\r\n    })\r\n)(SetCardsQuantityBtn);","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\n\r\nclass ListDate extends Component{\r\n    setDate(){\r\n        let curr_date = \"\" + this.props.date.getDate(),\r\n            diff = this.props.date.getTime() - 86400000,\r\n            prev_date = new Date(diff).getDate();\r\n         if(!this.props.isToday){\r\n             return `${curr_date<2? prev_date:this.props.date.getDate()-1}`\r\n         }else{\r\n             return `${this.props.date.getDate()}`\r\n         }\r\n    }\r\n\r\n    setMonth(){\r\n        if(this.props.isToday){\r\n            return `${this.props.monthNames[this.props.date.getMonth()]}`\r\n        }else{\r\n            if(this.props.date.getDate()<2){\r\n                if(this.props.date.getMonth()=== 0){\r\n                    return `${this.props.monthNames[11]}`\r\n                }\r\n                return `${this.props.monthNames[this.props.date.getMonth() - 1]}`\r\n            }else{\r\n                return `${this.props.monthNames[this.props.date.getMonth()]}`\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"list-date\">{\r\n            `${this.setDate()}\r\n            ${this.setMonth()}\r\n            ${this.props.date.getFullYear()}\r\n            `\r\n        }</div>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        date: state.date,\r\n        monthNames: state.monthNames\r\n    })\r\n)(ListDate);","\r\nexport const setImageSize = (imageSize) => dispatch =>{\r\n    let newSize = imageSize === 'original'? 'medium': 'original';\r\n    dispatch({type: 'SET_IMAGE_SIZE', payload: newSize});\r\n};","\r\nexport const setCardStyle = (imageSize, data, id, isToday) => dispatch =>{\r\n    let newSize = imageSize === 'original'? 'medium': 'original';\r\n    let newData = data.map((item)=>{\r\n        if(item.id === id){\r\n            item.imageSize = newSize;\r\n        }\r\n        return item;\r\n    });\r\n    if(isToday){\r\n        dispatch({type: 'SET_SELECTED_DAY_CARD_IMAGE_SIZE', payload: newData});\r\n    }else{\r\n        dispatch({type: 'SET_PREV_DAY_CARD_IMAGE_SIZE', payload: newData});\r\n    }\r\n\r\n};","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {fetchData} from \"../actions/fetchData\";\r\nimport SetCardsQuantityBtn from \"./SetCardsQuantityBtn\";\r\nimport ListDate from \"./ListDate\";\r\nimport {setImageSize} from \"../actions/setImageSize\";\r\nimport {setCardStyle} from \"../actions/setCardStyle\";\r\n\r\nclass MovieList extends Component{\r\n\r\n    isImage(item){\r\n        if(item.show.image){\r\n            return `${this.props.imageSize !== 'medium'? item.show.image.original : item.show.image.medium}`\r\n        }else{\r\n            return '';\r\n        }\r\n    }\r\n\r\n    isActiveDateCard(){\r\n        if(this.props.id === 'selectedDateBtn'){\r\n            return this.props.selectedCardsQuantity;\r\n        }else if(this.props.id === 'prevDateBtn'){\r\n            return this.props.prevCardsQuantity;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <ListDate isToday={this.props.isToday}/>\r\n            <div className=\"card-container\">\r\n                {this.props.data.map((item, index) => {\r\n                    if(index < this.isActiveDateCard()){\r\n                        return <div key={index} className={`card ${item.imageSize==='original'?'card-original':''}`}>\r\n                            <img src={`${this.isImage(item)}`}\r\n                                 onClick={()=>{\r\n                                     this.props.onSetImageSize(this.props.imageSize);\r\n                                     this.props.onSetCardStyle(this.props.imageSize,\r\n                                         this.props.data,\r\n                                         item.id,\r\n                                         this.props.isToday\r\n                                     );\r\n                                 }\r\n                                 }\r\n                                 className={`card-img ${item.imageSize}`}\r\n                                 alt=\"\"/>\r\n                            <div className=\"card-description\">\r\n                                <div>\r\n                                    <div className=\"card-name\">\r\n                                        {item.show.name}\r\n                                        <div className={item.season%2===0?\"bell-icon\":\"\"}> </div>\r\n                                        </div>\r\n                                    <div className=\"card-year\">{item.airdate.substring(0,4)}</div>\r\n                                </div>\r\n                                <div className=\"card-season\">\r\n                                <span>\r\n                                    сезон: {item.season}\r\n                                </span>\r\n                                    <span>\r\n                                    эпизод: {`${item.show._links.self.href.slice(-1)}`}\r\n                                </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                })\r\n                }\r\n                <SetCardsQuantityBtn id={this.props.id} data={this.props.data}/>\r\n            </div>\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        selectedCardsQuantity: state.selectedCardsQuantity,\r\n        prevCardsQuantity: state.prevCardsQuantity,\r\n        imageSize: state.imageSize\r\n    }),\r\n    dispatch =>({\r\n        onFetchData: (data) =>{\r\n            dispatch(fetchData(data));\r\n        },\r\n        onSetImageSize: (imageSize) =>{\r\n            dispatch(setImageSize(imageSize));\r\n        },\r\n        onSetCardStyle: (size, data, id, isToday) =>{\r\n            dispatch(setCardStyle(size, data, id, isToday));\r\n        }\r\n    })\r\n)(MovieList);","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {fetchData} from \"../actions/fetchData\";\r\nimport SetCardsQuantityBtn from \"./SetCardsQuantityBtn\";\r\nimport ListDate from \"./ListDate\";\r\nimport {setImageSize} from \"../actions/setImageSize\";\r\nimport {setCardStyle} from \"../actions/setCardStyle\";\r\nimport MovieList from \"./MovieList\";\r\n\r\nclass MovieListContainer extends Component{\r\n    componentWillMount(){\r\n        this.props.onFetchData(this.props.date);\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {this.props.dataToday? <MovieList data={this.props.dataToday}\r\n                                              id={'selectedDateBtn'}\r\n                                              date={this.props.date}\r\n                                              isToday={true}/> :null}\r\n            {this.props.dataYesterday? <MovieList data={this.props.dataYesterday}\r\n                                                  id={'prevDateBtn'}\r\n                                                  date={this.props.date-1}\r\n                                                  isToday={false}/>:null}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        dataToday: state.dataSelected,\r\n        dataYesterday: state.dataPrev,\r\n        date: state.date,\r\n        cardsQuantity: state.cardsQuantity,\r\n        imageSize: state.imageSize\r\n    }),\r\n    dispatch =>({\r\n        onFetchData: (data) =>{\r\n            dispatch(fetchData(data));\r\n        },\r\n        onSetImageSize: (imageSize) =>{\r\n            dispatch(setImageSize(imageSize));\r\n        },\r\n        onSetCardStyle: (size, data, id) =>{\r\n            dispatch(setCardStyle(size, data, id));\r\n        }\r\n    })\r\n)(MovieListContainer);","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {setListVisibility} from \"../actions/setListVisibility\";\r\nimport {setCardsQuantity} from \"../actions/setCardsQuantity\";\r\nimport {setImageSize} from \"../actions/setImageSize\";\r\n\r\nclass BackBtn extends Component{\r\n    render() {\r\n        return <button\r\n            className=\"backBtn\"\r\n            onClick={()=>{\r\n            this.props.onSetVisibility(false);\r\n            this.props.onSetCardsQuantity(2);\r\n            this.props.onSetImageSize('medium');\r\n        }}>\r\n\r\n        </button>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        data: state.data\r\n    }),\r\n    dispatch =>({\r\n        onSetVisibility: (value) =>{\r\n            dispatch(setListVisibility(value));\r\n        },\r\n        onSetCardsQuantity: (cardsQuantity) =>{\r\n            dispatch(setCardsQuantity(cardsQuantity));\r\n        },\r\n        onSetImageSize: (imageSize) =>{\r\n            dispatch(setImageSize(imageSize));\r\n        }\r\n    })\r\n)(BackBtn);","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport BackBtn from \"./BackBtn\";\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        return <header>\r\n            {this.props.listVisibility? <BackBtn/>: null}\r\n            <h1>Super film</h1>\r\n        </header>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        listVisibility: state.listVisibility\r\n    })\r\n)(Header);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport MovieCalendar from './components/MovieCalendar';\nimport MovieListContainer from './components/MovieListContainer';\nimport Header from './components/Header';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n      return (\n          <div className=\"app\">\n              <Header/>\n              {!this.props.listVisibility? <MovieCalendar/>: null}\n              {this.props.listVisibility? <MovieListContainer/>: null}\n          </div>\n      );\n  }\n}\n\nexport default connect(\n    state =>({\n        listVisibility: state.listVisibility\n    })\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport {createStore, applyMiddleware} from 'redux';\nimport './index.css';\nimport reducer from './reducers';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}