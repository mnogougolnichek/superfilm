{"version":3,"sources":["images/infoimg.jpg","reducers/data.js","reducers/date.js","reducers/listVisibility.js","reducers/cardsQuantity.js","reducers/monthNames.js","reducers/imageSize.js","reducers/index.js","actions/fetchData.js","actions/setListVisibility.js","components/MovieCalendar.js","actions/setDate.js","actions/setCardsQuantity.js","components/SetCardsQuantityBtn.js","components/ListDate.js","components/MovieList.js","actions/setImageSize.js","actions/setCardStyle.js","components/BackBtn.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","Date","combineReducers","data","state","arguments","length","undefined","action","type","payload","console","log","date","listVisibility","cardsQuantity","monthNames","imageSize","fetchData","dispatch","curr_date","getDate","curr_month","getMonth","curr_year","getFullYear","fetch","concat","then","response","json","catch","setListVisibility","value","MovieCalendar","onChange","_this","props","onSetDate","onSetVisibility","onFetchData","react_default","a","createElement","className","id","src","infoBlockImg","alt","entry_default","this","Component","components_MovieCalendar","connect","setDate","setCardsQuantity","SetCardsQuantityBtn","onClick","onSetCardsQuantity","showLess","showMore","ListDate","MovieList","item","show","image","original","medium","components_ListDate","map","index","key","isImage","onSetImageSize","onSetCardStyle","name","airdate","substring","season","_links","self","href","slice","components_SetCardsQuantityBtn","newSize","setImageSize","size","setCardStyle","BackBtn","Header","components_BackBtn","App","components_Header","components_MovieList","Boolean","window","location","hostname","match","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70bab760.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/infoimg.03d0915f.jpg\";","const initialState = [];\r\n\r\nexport default function data(state = initialState, action) {\r\n    if(action.type === 'FETCH_DATA_SUCCESS'){\r\n        return action.payload;\r\n    }\r\n    if(action.type === 'SET_CARD_IMAGE_SIZE'){\r\n        console.log(action.payload);\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = new Date();\r\n\r\nexport default function date(state = initialState, action) {\r\n    if(action.type === 'SET_DATE'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = false;\r\n\r\nexport default function listVisibility(state = initialState, action) {\r\n    if(action.type === 'SET_LIST_VISIBILITY'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = 3;\r\n\r\nexport default function cards(state = initialState, action) {\r\n    if(action.type === 'SET_CARDS_QUANTITY'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","const initialState = [\"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\",\r\n    \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"\r\n];\r\n\r\nexport default function monthNames(state = initialState) {\r\n    return state;\r\n}","const initialState = 'medium';\r\n\r\nexport default function imageSize(state = initialState, action) {\r\n    if(action.type === 'SET_IMAGE_SIZE'){\r\n        return action.payload;\r\n    }\r\n    return state;\r\n}","import {combineReducers} from 'redux';\r\nimport data from './data';\r\nimport date from './date';\r\nimport listVisibility from './listVisibility';\r\nimport cardsQuantity from './cardsQuantity';\r\nimport monthNames from './monthNames';\r\nimport imageSize from './imageSize';\r\n\r\nexport default combineReducers({\r\n    data,\r\n    date,\r\n    listVisibility,\r\n    cardsQuantity,\r\n    monthNames,\r\n    imageSize\r\n})","\r\nexport const fetchData = (date) => dispatch =>{\r\n    let curr_date = \"\" + date.getDate(),\r\n        curr_month = \"\" + (date.getMonth() + 1),\r\n        curr_year = \"\" + date.getFullYear();\r\n    console.log(typeof(curr_date));\r\n    if(curr_date.length<2) {curr_date = '0' + curr_date;}\r\n    if(curr_month.length<2) {curr_month = '0' + curr_month;}\r\n    console.log(curr_year + \"-\" + curr_month + \"-\" + curr_date);\r\n    fetch(`https://api.tvmaze.com/schedule?country=US&date=${curr_year + \"-\" + curr_month + \"-\" + curr_date}`)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(response => {\r\n            dispatch({type: 'FETCH_DATA_SUCCESS', payload: response});\r\n        })\r\n        .catch( console.log );\r\n};","\r\nexport const setListVisibility = (value) => dispatch =>{\r\n    dispatch({type: 'SET_LIST_VISIBILITY', payload: value});\r\n};","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Calendar from 'react-calendar';\r\nimport infoBlockImg from '../images/infoimg.jpg';\r\nimport {setDate} from \"../actions/setDate\";\r\nimport {fetchData} from \"../actions/fetchData\";\r\nimport {setListVisibility} from \"../actions/setListVisibility\";\r\n\r\nclass MovieCalendar extends Component {\r\n\r\n    onChange = date => {\r\n        this.props.onSetDate(date);\r\n        this.props.onSetVisibility(true);\r\n        this.props.onFetchData(this.props.date);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calendar-block\" id=\"calendar\">\r\n                <div className=\"info-block\">\r\n                    <img src={infoBlockImg} className=\"info-block__img\" alt=\"\"/>\r\n                    <p>Для получения списка сериалов, пожалуйста, выберите необходимый месяц и день.</p>\r\n                </div>\r\n                <Calendar\r\n                    onChange={this.onChange}\r\n                    value={this.props.date}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        date:state.date\r\n    }),\r\n    dispatch =>({\r\n        onSetDate: (date) =>{\r\n            dispatch(setDate(date));\r\n        },\r\n        onFetchData: (date) =>{\r\n            dispatch(fetchData(date))\r\n        },\r\n        onSetVisibility: (value) =>{\r\n            dispatch(setListVisibility(value));\r\n        }\r\n    })\r\n)(MovieCalendar);","\r\nexport const setDate = (date) => dispatch =>{\r\n    dispatch({type: 'SET_DATE', payload: date});\r\n};","\r\nexport const setCardsQuantity = (cardsQuantity) => dispatch =>{\r\n    dispatch({type: 'SET_CARDS_QUANTITY', payload: cardsQuantity});\r\n};","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {setCardsQuantity} from \"../actions/setCardsQuantity\";\r\n\r\nclass SetCardsQuantityBtn extends Component{\r\n    showMore(){\r\n        return `Показать еще ${this.props.data.length - this.props.cardsQuantity} сериала`\r\n    }\r\n\r\n    showLess(){\r\n        return 'Показать основные'\r\n    }\r\n\r\n    render() {\r\n        return <button\r\n            className=\"setCardsQuantityBtn\"\r\n            onClick={()=>{\r\n                let cardsQuantity = this.props.cardsQuantity > 3 ? 3 : this.props.data.length;\r\n                this.props.onSetCardsQuantity(cardsQuantity);\r\n            }}>\r\n            {this.props.cardsQuantity > 3 ? this.showLess() : this.showMore()}\r\n        </button>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        data: state.data,\r\n        cardsQuantity: state.cardsQuantity,\r\n    }),\r\n    dispatch =>({\r\n        onSetCardsQuantity: (cardsQuantity) =>{\r\n            dispatch(setCardsQuantity(cardsQuantity));\r\n        }\r\n    })\r\n)(SetCardsQuantityBtn);","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\n\r\nclass ListDate extends Component{\r\n    render() {\r\n        console.log(this.props.date.getDate());\r\n        return <div className=\"list-date\">{\r\n            `${this.props.date.getDate()}\r\n            ${this.props.monthNames[this.props.date.getMonth()]}\r\n            ${this.props.date.getFullYear()}\r\n            `\r\n        }</div>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        date: state.date,\r\n        monthNames: state.monthNames\r\n    })\r\n)(ListDate);","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {fetchData} from \"../actions/fetchData\";\r\nimport SetCardsQuantityBtn from \"./SetCardsQuantityBtn\";\r\nimport ListDate from \"./ListDate\";\r\nimport {setImageSize} from \"../actions/setImageSize\";\r\nimport {setCardStyle} from \"../actions/setCardStyle\";\r\n\r\nclass MovieList extends Component{\r\n    componentWillMount(){\r\n        this.props.onFetchData(this.props.date);\r\n    }\r\n\r\n    isImage(item){\r\n        if(item.show.image){\r\n            return `${this.props.imageSize !== 'medium'? item.show.image.original : item.show.image.medium}`\r\n        }else{\r\n            return '';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <ListDate/>\r\n            <div className=\"card-container\">\r\n                {this.props.data.map((item, index) => {\r\n                    if(index < this.props.cardsQuantity){\r\n                        return <div key={index} className=\"card\">\r\n                            <img src={`${this.isImage(item)}`}\r\n                                 onClick={()=>{\r\n                                     this.props.onSetImageSize(this.props.imageSize);\r\n                                     this.props.onSetCardStyle(this.props.imageSize,\r\n                                         this.props.data,\r\n                                         item.id\r\n                                     );\r\n                                 }\r\n                                 }\r\n                                 className={`card-img ${item.imageSize}`}\r\n                                 alt=\"\"/>\r\n                            <div className=\"card-description\">\r\n                                <div>\r\n                                    <div className=\"card-name\">{item.show.name}</div>\r\n                                    <div className=\"card-year\">{item.airdate.substring(0,4)}</div>\r\n                                </div>\r\n                                <div className=\"card-season\">\r\n                                <span>\r\n                                    сезон: {item.season}\r\n                                </span>\r\n                                    <span>\r\n                                    эпизод: {`${item.show._links.self.href.slice(-1)}`}\r\n                                </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                })\r\n                }\r\n                <SetCardsQuantityBtn/>\r\n            </div>\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        data: state.data,\r\n        date: state.date,\r\n        cardsQuantity: state.cardsQuantity,\r\n        imageSize: state.imageSize\r\n    }),\r\n    dispatch =>({\r\n        onFetchData: (data) =>{\r\n            dispatch(fetchData(data));\r\n        },\r\n        onSetImageSize: (imageSize) =>{\r\n            dispatch(setImageSize(imageSize));\r\n        },\r\n        onSetCardStyle: (size, data, id) =>{\r\n            dispatch(setCardStyle(size, data, id));\r\n        }\r\n    })\r\n)(MovieList);","\r\nexport const setImageSize = (imageSize) => dispatch =>{\r\n    let newSize = imageSize === 'original'? 'medium': 'original';\r\n    console.log(newSize);\r\n    dispatch({type: 'SET_IMAGE_SIZE', payload: newSize});\r\n};","\r\nexport const setCardStyle = (imageSize, data, id) => dispatch =>{\r\n    let newSize = imageSize === 'original'? 'medium': 'original';\r\n    console.log(id);\r\n    let newData = data.map((item)=>{\r\n        if(item.id === id){\r\n            item.imageSize = newSize;\r\n        }\r\n        return item;\r\n    });\r\n    dispatch({type: 'SET_CARD_IMAGE_SIZE', payload: newData});\r\n};","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {setListVisibility} from \"../actions/setListVisibility\";\r\nimport {setCardsQuantity} from \"../actions/setCardsQuantity\";\r\n\r\nclass BackBtn extends Component{\r\n    render() {\r\n        return <button\r\n            className=\"backBtn\"\r\n            onClick={()=>{\r\n            this.props.onSetVisibility(false);\r\n            this.props.onSetCardsQuantity(3);\r\n        }}>\r\n\r\n        </button>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        data: state.data\r\n    }),\r\n    dispatch =>({\r\n        onSetVisibility: (value) =>{\r\n            dispatch(setListVisibility(value));\r\n        },\r\n        onSetCardsQuantity: (cardsQuantity) =>{\r\n            dispatch(setCardsQuantity(cardsQuantity));\r\n        }\r\n    })\r\n)(BackBtn);","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport BackBtn from \"./BackBtn\";\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        return <header>\r\n            {this.props.listVisibility? <BackBtn/>: null}\r\n            <h1>Super film</h1>\r\n        </header>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state =>({\r\n        listVisibility: state.listVisibility\r\n    })\r\n)(Header);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport MovieCalendar from './components/MovieCalendar';\nimport MovieList from './components/MovieList';\nimport Header from './components/Header';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n      return (\n          <div className=\"app\">\n              <Header/>\n              {!this.props.listVisibility? <MovieCalendar/>: null}\n              {this.props.listVisibility? <MovieList/>: null}\n          </div>\n      );\n  }\n}\n\nexport default connect(\n    state =>({\n        listVisibility: state.listVisibility\n    }),\n    dispatch =>({\n\n    })\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport {createStore, applyMiddleware} from 'redux';\nimport './index.css';\nimport reducer from './reducers';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}